 ------------------------------------------------------------------------------
 -- Copyright 1995 International Computer Science Institute                  --
 -- Copyright 2007 Michael R. Taylor                                         --
 --                                                                          --
 -- This file is part of GNU Sather (library)                                --
 --                                                                          --
 -- GNU Sather (library) is free software; you can redistribute it and/or    --
 -- modify it under the terms of the GNU Lesser General Public License as    --
 -- published by the Free Software Foundation; either version 3 of the       --
 -- License, or (at your option) any later version.                          --
 --                                                                          --
 -- GNU Sather (library) is distributed in the hope that it will be useful,  --
 -- but WITHOUT ANY WARRANTY; without even the implied warranty of           --
 -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser  --
 -- General Public License for more details.                                 --
 --                                                                          --
 -- You should have received a copy of the GNU Lesser General Public License --
 -- along with this program. If not, see <http://www.gnu.org/licenses/>.     --
 ------------------------------------------------------------------------------

-- queue.sa: Standard queue
-- Author: Benedict A. Gomes <gomes@icsi.berkeley.edu>

abstract class $QUEUE{T} <  $DISPENSER{T} is
   -- Abstract queue

   -- size: INT;
   -- current: T;
   -- remove: T;
   -- Return the topmost element of the queue and advance
   -- str: STR;
   -- copy: SAME;
   -- has(e: T): BOOL;
   
   top: T;
   -- Return the topmost element (alias for current)
   
   enq(elt:T);
   -- Enqueue the element "elt"
   
   is_empty: BOOL;
   -- Is the queue empty
   
   elt!: T;
   -- Return the elements in queue order (without removing them)
   -- i.e. return them in the same order as "remove" would
   
end;
