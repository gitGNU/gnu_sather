 ------------------------------------------------------------------------------
 -- Copyright 1995 International Computer Science Institute                  --
 -- Copyright 2007 Michael R. Taylor                                         --
 --                                                                          --
 -- This file is part of GNU Sather (library)                                --
 --                                                                          --
 -- GNU Sather (library) is free software; you can redistribute it and/or    --
 -- modify it under the terms of the GNU Lesser General Public License as    --
 -- published by the Free Software Foundation; either version 3 of the       --
 -- License, or (at your option) any later version.                          --
 --                                                                          --
 -- GNU Sather (library) is distributed in the hope that it will be useful,  --
 -- but WITHOUT ANY WARRANTY; without even the implied warranty of           --
 -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser  --
 -- General Public License for more details.                                 --
 --                                                                          --
 -- You should have received a copy of the GNU Lesser General Public License --
 -- along with this program. If not, see <http://www.gnu.org/licenses/>.     --
 ------------------------------------------------------------------------------

-- Author: Benedict A. Gomes <gomes@samosa.ICSI.Berkeley.EDU>

abstract class $OSTREAM is
   -- A general output stream. A first stab at streams.  This
   -- abstraction is already useful for routines that might use a file
   -- or a string ( a common choice is whether a routine will write to
   -- stdout or to a string which may then be printed to a file).
   -- 
   -- Usage:
   --    write_to_stream(o: $OUTSTREAM) is
   --        o + "this is a test";
   --    end;
   --    Which can be invoked using:
   --     write_to_stream(FILE::stdout);
   --       or 
   --     s: STR_STREAM := #;
   --     write_to_stream(s);
   --     write_to_stream(s);
   --     s.str then would have two copies of "this is a test" in it.

   
   plus(s: $STR);
   -- Append the string "s" to the stream
   
   plus(s: $STR): SAME;
   -- Append the string "s" to the stream and return self

end; -- class $OUTSTREAM
