 ------------------------------------------------------------------------------
 -- Copyright 1995 International Computer Science Institute                  --
 -- Copyright 2007 Michael R. Taylor                                         --
 --                                                                          --
 -- This file is part of GNU Sather (library)                                --
 --                                                                          --
 -- GNU Sather (library) is free software; you can redistribute it and/or    --
 -- modify it under the terms of the GNU Lesser General Public License as    --
 -- published by the Free Software Foundation; either version 3 of the       --
 -- License, or (at your option) any later version.                          --
 --                                                                          --
 -- GNU Sather (library) is distributed in the hope that it will be useful,  --
 -- but WITHOUT ANY WARRANTY; without even the implied warranty of           --
 -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser  --
 -- General Public License for more details.                                 --
 --                                                                          --
 -- You should have received a copy of the GNU Lesser General Public License --
 -- along with this program. If not, see <http://www.gnu.org/licenses/>.     --
 ------------------------------------------------------------------------------

-- Successor stream
-- Author: Benedict A. Gomes <gomes@samosa.ICSI.Berkeley.EDU>

abstract class $SUCC_STREAM{NTP} is
   -- An abstraction that specifies a generator of successive 
   -- unique values of type NTP
   
   next: NTP;
   -- Return the next unique value
   
end;
-------------------------------------------------------------------
class INT_STREAM < $SUCC_STREAM{INT} is
   -- Yield a stream of successive integers

   private attr val: INT;
   
   create(start_val: INT): SAME is
      -- Return a new integer stream whose next yielded
      -- value will be "start_val"
      res ::= new;
      res.val := start_val;
      return res;
   end;
   
   next: INT is
      -- Yield the next integer in this stream
      -- Wrap around is not permitted in this kind of integer stream
      res ::= val;
      assert val /= INT::maxint;
      val := val+1;
      return res;
   end;
   
   
   next!: INT is
      -- Keep yielding successive integers. 
      -- Will quit at maxint - 1
      if val = INT::maxint then quit end;
      yield next;
   end;
   
end;
-------------------------------------------------------------------


