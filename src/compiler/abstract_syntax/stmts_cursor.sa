 ------------------------------------------------------------------------------
 -- Copyright 199x International Computer Science Institute                  --
 -- Copyright 2007 Michael R. Taylor                                         --
 --                                                                          --
 -- This file is part of GNU Sather (compiler)                               --
 --                                                                          --
 -- GNU Sather (compiler) is free software; you can redistribute it and/or   --
 -- modify it under the terms of the GNU General Public License as           --
 -- published by the Free Software Foundation; either version 3 of the       --
 -- License, or (at your option) any later version.                          --
 --                                                                          --
 -- GNU Sather (compiler) is distributed in the hope that it will be useful, --
 -- but WITHOUT ANY WARRANTY; without even the implied warranty of           --
 -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU         --
 -- General Public License for more details.                                 --
 --                                                                          --
 -- You should have received a copy of the GNU General Public License        --
 -- along with this program. If not, see <http://www.gnu.org/licenses/>.     --
 ------------------------------------------------------------------------------

class AS_STMT_CURSOR is
   create:SAME is
      r::=new;
      return r;
   end;
   
   preorder!(cur:$AS_NODE):$AS_STMT is
      -- returns statements in preorder
      
      if void(cur) then quit; end;
	 
      as:$AS_NODE := cur;
      typecase as 
      when AS_STMT_LIST then
	 loop yield preorder!(as.stmts); end;
      when AS_DEC_STMT then
	 yield as;
      when AS_ASSIGN_STMT then
	 yield as;	 
      when AS_IF_STMT then
	 yield as;
	 loop yield preorder!(as.then_part); end;
	 loop yield preorder!(as.else_part); end;	 
      when AS_LOOP_STMT then
	 yield as;
	 loop yield preorder!(as.body) end;
      when AS_RETURN_STMT then
	 yield as;
      when AS_YIELD_STMT then
	 yield as;
      when AS_QUIT_STMT then
	 yield as;
      when AS_CASE_STMT then 
	 yield as;
	 loop yield preorder!(as.when_part); end;
	 loop yield preorder!(as.else_part); end;	 
      when AS_CASE_WHEN then
	 loop yield preorder!(as.then_part); end;
	 loop yield preorder!(as.next); end;
      when AS_TYPECASE_STMT then 
	 yield as;
	 loop yield preorder!(as.when_part); end;
	 loop yield preorder!(as.else_part); end;	 	 
      when AS_TYPECASE_WHEN then
	 loop yield preorder!(as.then_part); end;
	 loop yield preorder!(as.next); end;	 
      when AS_ASSERT_STMT then
	 yield as;
      when AS_PROTECT_STMT then
	 yield as;
	 loop yield preorder!(as.body); end;
	 loop yield preorder!(as.when_part); end;
	 loop yield preorder!(as.else_part); end;	 
      when AS_PROTECT_WHEN then
	 loop yield preorder!(as.then_part); end;
	 loop yield preorder!(as.next); end;	 
      when AS_PAR_STMT then
	 yield as;
	 loop yield preorder!(as.body); end;	 
      when AS_INTERF_ATTACH_STMT then
	 yield as;
      when AS_LOCK_STMT then
	 yield as;
	 loop yield preorder!(as.then_part); end;	 	 
	 loop yield preorder!(as.if_when_part); end;	 	 	 
	 loop yield preorder!(as.else_part); end;	 	 	 
      when AS_LOCK_IF_WHEN then
	 loop yield preorder!(as.then_part); end;	 	 	 
	 loop yield preorder!(as.next); end;	 	 	 
      when AS_UNLOCK_STMT then
	 yield as;
      when AS_SYNC_STMT then
	 yield as;
      when AS_WITH_NEAR_STMT then
	 yield as;	 
	 loop yield preorder!(as.near_part); end;
	 loop yield preorder!(as.else_part); end;
      when AS_ATTACH_STMT then
	 yield as;
      when AS_FORK_STMT then 
	 yield as;
	 loop yield preorder!(as.body); end;
      when AS_RAISE_STMT then
	 yield as;
      when AS_EXPR_STMT then
	 yield as;
      else
	 -- these nodes contain no statements
      end;
      
      -- if we are dealing with a statement, process others in
      -- the same block
      typecase as
      when $AS_STMT then
	 loop yield preorder!(as.next); end;
      else
	 -- nothing to do 
      end;
   end;
end;

